/* Program */
program ::= port action_list agent_list behavior_list task_list main

/* Port */
port ::= "Port" ":" integer

/* Action */
action_list ::= action+

action ::= "Action" variable "(" formal_parameters? ")" action_compound_statement

action_compound_statement ::= "{" action_statement ( action_statement )* "}"

action_statement ::= action_RPC_call_assignment_statement
                    | action_RPC_call_statement
                    | action_return_statement
                    | action_if_else
                    | assignment_statement
                    | empty 

action_RPC_call_assignment_statement ::= variable action_RPC_call_statement ";"

action_RPC_call_statement ::= ":=" string ";"

action_return_statement ::= "return" expression ";"

action_if_else ::= "if" "(" expression ")" action_compound_statement ( "else" action_compound_statement )?

action_call ::= variable "(" actual_parameters? ")"

/* Agent */
agent_list ::= agent+

agent ::= "Agent" variable "{" ( variable ( "," variable )* )? ";" "}"

agent_call ::= "Agent" variable integer ";"

/* Behavior */
behavior_list ::= behavior+

behavior ::= "Behavior" variable "(" formal_parameters? ")" "{" behavior_init_block behavior_goal_block behavior_routine_block "}"

behavior_init_block ::= "@init" behavior_compound_statement

behavior_goal_block ::= "@goal" "{" behavior_statement* "$" expression "}"

behavior_routine_block ::= "@routine" behavior_compound_statement ( "||" behavior_compound_statement )*

behavior_compound_statement ::= "{" behavior_statement* "}"

behavior_statement ::= put_statement
                        | get_statement
                        | behavior_publish_statement
                        | behavior_subscribe_statement
                        | behavior_unsubscribe_statement
                        | behavior_assignment_statement
                        | behavior_if_else
                        | behavior_call
                        | action_call
                        | empty

behavior_publish_statement ::= "publish" expression "to" ( topic_p2p | topic_multicast ) ";"

behavior_subscribe_statement ::= "subscribe" variable "from" ( topic_p2p | topic_multicast ) behavior_compound_statement

behavior_unsubscribe_statement ::= "unsubscribe" ( topic_p2p | topic_multicast ) ";"

behavior_assignment_statement ::= variable "=" ( string | logical_not_expression | action_call ) ";"

behavior_if_else ::= "if" "(" expression ")" behavior_compound_statement ( "else" behavior_compound_statement )?

behavior_call ::= variable "(" actual_parameters? ")"

/* Task */
task_list ::= task+

task ::= "Task" variable "(" formal_parameters_agent_list formal_parameters? ")" "{" task_init_block task_goal_block task_routine_block "}"

task_init_block ::= "@init" task_compound_statement

task_goal_block ::= "@goal" "{" task_statement* "$" expression "}"

task_routine_block ::= "@routine" ( task_routine_parallel | task_routine_order | task_routine_each )

task_routine_parallel ::= task_compound_statement ( "||" task_compound_statement )* 

task_routine_order ::= "order" actual_parameters_agent_range task_compound_statement

task_routine_each ::= "each" actual_parameters_agent_range task_compound_statement

task_compound_statement ::= "{" task_statement* "}"

task_statement ::= put_statement
                | get_statement
                | assignment_statement
                | task_if_else
                | task_call
                | behavior_call
                | empty


task_if_else ::= "if" "(" expression ")" task_compound_statement ( "else" task_compound_statement )?

task_call ::= variable "(" actual_parameters_agent_list actual_parameters? ")"


/* Main */
main ::= "Main" "{" agent_call+ task_call* "}"

/* Basic Statement */
put_statement ::= "put" expression "to" stigmergy ";"

get_statement ::= "get" variable "from" stigmergy ";"

assignment_statement ::= variable "=" ( string | logical_not_expression ) ";"

expression_statement ::= expression ";"

empty ::= 

/* Basic Elements */
stigmergy ::= "#" variable "#"

topic_p2p ::= "<" variable ">"

topic_multicast ::= "<<" variable ">>"

/* Parameters */
formal_parameters_agent_list ::= "{" formal_parameters_agent_range ( "," formal_parameters_agent_range ) "}"

actual_parameters_agent_list ::= "{" actual_parameters_agent_range ( "," actual_parameters_agent_range ) "}"

formal_parameters_agent_range ::= variable "[" variable "~" variable "]"

actual_parameters_agent_range ::= variable "[" ( integer | variable) "~" ( integer | variable) "]"

formal_parameters ::= variable ( "," variable )*

actual_parameters ::= ( integer | variable ) ( "," ( integer | variable ) )*

/* Expressions */
expression ::= logical_not_expression

logical_not_expression ::= "not"? logical_or_expression

logical_or_expression ::= logical_and_expression
                        | logical_or_expression "or" logical_and_expression

logical_and_expression ::= equality_expression
                        | logical_and_expression "and" equality_expression

equality_expression ::= relational_expression
                    | equality_expression "==" relational_expression
                    | equality_expression "!=" relational_expression

relational_expression ::= additive_expression
                        | relational_expression "<" additive_expression
                        | relational_expression "<=" additive_expression
                        | relational_expression ">" additive_expression
                        | relational_expression ">=" additive_expression

additive_expression ::= multiplicative_expression ( ( "+" | "-" ) multiplicative_expression )*

multiplicative_expression ::= primary_expression ( ( "*" | "/" | "%" ) primary_expression )*

primary_expression ::= integer
                        | ( "+" | "-" ) primary_expression
                        | "(" expression ")"
                        | variable

/* range_expression ::= ( integer | variable) "~" ( integer | variable)
                    | ( integer | variable) "~" ( integer | variable) "~" ( integer | variable)
                    | ( integer | variable) ( "," ( integer | variable) )* */

variable ::= [_a-zA-Z] [_a-zA-Z0-9]*

/* Constants */
integer ::= "0" | ( [1-9] [0-9]* )

string ::= '"' ( #x0009 | #x000A | #x000D | [#x0020-#xFFFF] )*  '"'

comments ::= "/*" ( #x0009 | #x000A | #x000D | [#x0020-#xFFFF] )* "*/"