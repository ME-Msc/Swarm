/* Basic component */
number ::= "0" | ( [1-9] [0-9]* )

variant ::= [a-zA-Z] ( [a-zA-Z0-9] | "_" )*

string ::= '"' [a-zA-Z0-9 ]* '"'

symbol_assignment ::= "="

symlbol_compare ::= "==" | "!=" | "<" | "<=" | ">" | ">="

symbol_parallel ::= "||"

single_expression ::=  ( number | variant | string ) symlbol_compare ( number | variant | string )

expression_negative ::= "not" single_expression

expression ::= ( single_expression | expression_negative) ( ( "and" | "or" ) ( single_expression | expression_negative) )*

/* DSL syntax component */
variant_uav_type ::= variant

variant_topic ::= variant

variant_uav_count_argument ::= variant

variant_uav_count_value ::= number | variant

variant_uav_type_count_pair ::= variant_uav_type ":" variant_uav_count_argument

variant_uav_type_count_list ::= "{" variant_uav_type_count_pair ( "," variant_uav_type_count_pair)* "}"

variant_argument ::= variant

variant_argument_value ::= number | variant

variant_argument_list ::= variant_argument ( "," variant_argument )*

variant_argument_value_list ::= "{" ( number | variant) ( "," number | variant )* "}"

variant_task ::= variant

variant_behavior ::= variant

variant_action ::= variant

/* DSL generic statement */
statement_generic ::= statement_topic | statement_variant_calculate

statement_topic ::= statement_publish_to | statement_request_from | statement_subscribe_from

statement_publish_to ::= "publish" variant "to" variant_topic

statement_request_from ::= "request" variant "from" variant_topic

statement_subscribe_from ::= "subscribe" variant "from" variant_topic

statement_variant_calculate ::= variant symbol_assignment ( variant | number ) [+-*/%] ( variant | number )

/* DSL task statement */
task_statement ::= statement_generic | task_statement_assignment | task_statement_task_call | task_statement_behavior_call

/* TODO:任务层调用可能有返回值 */
task_statement_assignment ::= variant symbol_assignment ( number | variant ) 

task_statement_task_call ::= variant_task "(" variant_uav_type_count_list ( "," variant_argument_value)* ")"

task_statement_behavior_call ::= variant_behavior "(" ( variant_argument_value ( "," variant_argument_value)* )? ")"

task_block ::= task_block_each | task_block_order | task_block_if_else

task_block_each ::= "each" variant_uav_type "[" ( number | variant ) ":" ( number | variant ) "]:\n" ( "\t" task_statement )+

task_block_order ::= "order" variant_uav_type "[" ( number | variant ) ":" ( number | variant ) "]:\n" ( "\t" task_statement )+

task_block_if_else ::= "if" expression ":\n" ( "\t" task_statement | task_block )+ ( "else:" task_statement | task_block )?

/* DSL behavior statement */
behavior_statement ::= statement_generic | behavior_statement_assignment | behavior_statement_action_call

behavior_statement_assignment ::= variant symbol_assignment ( number | variant | behavior_statement_action_call)

behavior_statement_action_call ::= variant_action "(" ( variant_argument_value ( "," variant_argument_value)* )? ")"

behavior_block_if_else ::= "if" expression ":\n" ( "\t" behavior_statement | behavior_block_if_else )+ ( "else:" behavior_statement | behavior_block_if_else )?

/* DSL action statement */

/* DSL task structure */
task ::= "Task" variant_task "(" variant_uav_type_count_list variant_argument_list "):\n" 
    "@uavTypes:" 
        variant_uav_type ( "," variant_uav_type )*
    "@topic:"
        ( variant_topic ( "," variant_topic )* )?
    "@init:"
        ( statement_topic | statement_variant_calculate | task_statement_assignment )*
    "@goal:"
        ( statement_topic | statement_variant_calculate | task_statement_assignment )*
        expression
    "@subtask:"
        ( variant_task ( "," variant_task)* )?
    "@behavior:"
        ( variant_behavior ( "," variant_behavior)* )?
    "@routine:"
        ( task_block_each | task_block_order | task_statement )+
        ( symbol_parallel
        ( task_block_each | task_block_order | task_statement )+ )?

/* DSL behavior structure */
behavior ::= "Behavior" variant_behavior "(" variant_argument_list? "):\n"
    "@topic:"
        ( variant_topic ( "," variant_topic)* )?
    "@action:"
        variant_action ( "," variant_action )*
    "@init:"
        ( behavior_statement_assignment | )
    "@goal:"
        expression
    "@routine:"
        ( statement_topic | statement_variant_calculate | behavior_statement_assignment )+
        ( symbol_parallel
        ( statement_topic | statement_variant_calculate | behavior_statement_assignment )+ )?

/* DSL action structure */
