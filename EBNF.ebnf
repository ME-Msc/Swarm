main ::= "main():" agent_declaration+ function_call*

/* Declaration, Defination, Call*/
agent_declaration ::= "Agent" identifier "=" integer_constant

agent_call ::= identifier "[" range_expression "]"

/* //FIXME: "Task" | "Behavior" | "Action"的格式约束不同怎么体现 */
function_defination ::= "Task" | "Behavior" | "Action" identifier "(" ( identifier ( "," identifier )* )? "):" function_block+ 

function_block ::= ( "@subtask" | "@behavior" | "@action" | "@agents" | "@topic" | "@init" | "@goal" | "@routine" ) statement*

function_call ::= identifier "(" ( identifier ( "," identifier )* )? ")"

/* Statements */
statement ::= topic_statement
            | each_statement
            | order_statement
            | return_statement
            | selection_statement
            | expression_statement
            | parallel_statement

topic_statement ::= "publish" expression "to" identifier
                | "subscribe" expression "from" identifier
                | "request" expression "from" identifier

each_statement ::= "each" agent_call ":" ( topic_statement | selection_statement | expression_statement )+

order_statement ::= "order" agent_call ":" ( topic_statement | selection_statement | expression_statement )+

return_statement ::= "return" expression

selection_statement ::= "if" expression ":" statement+ ( "else:" statement+ )?

expression_statement ::= expression?

parallel_statement ::= "||"

/* Expressions */
expression ::= assignment_expression
            | expression "," assignment_expression                

assignment_expression ::= identifier "=" negative_expression

negative_expression ::= "!"? logical_or_expression

logical_or_expression ::= logical_and_expression
                        | logical_or_expression "or" logical_and_expression

logical_and_expression ::= equality_expression
                        | logical_and_expression "and" equality_expression

equality_expression ::= relational_expression
                    | equality_expression "==" relational_expression
                    | equality_expression "!=" relational_expression

relational_expression ::= additive_expression
                        | relational_expression "<" additive_expression
                        | relational_expression "<=" additive_expression
                        | relational_expression ">" additive_expression
                        | relational_expression ">=" additive_expression

additive_expression ::= multiplicative_expression
                        | additive_expression "+" multiplicative_expression
                        | additive_expression "-" multiplicative_expression

multiplicative_expression ::= primary_expression
                                | multiplicative_expression "*" primary_expression
                                | multiplicative_expression "/" primary_expression
                                | multiplicative_expression "%" primary_expression


range_expression ::= ( integer_constant | identifier) "~" ( integer_constant | identifier)
                    | ( integer_constant | identifier) "~" ( integer_constant | identifier) "~" ( integer_constant | identifier)
                    | ( integer_constant | identifier) ( "," ( integer_constant | identifier) )*

primary_expression ::= identifier
                    | constant
                    | "(" primary_expression ")"

identifier ::= [a-zA-Z] ( [a-zA-Z0-9] | "_" )*

/* Constants */
constant ::= integer_constant 
            | floating_constant
            | string_constant

integer_constant ::= "0" 
                    | ( [1-9] [0-9]* )

floating_constant ::= integer_constant "." integer_constant

string_constant ::= '"' [a-zA-Z0-9 ]* '"'